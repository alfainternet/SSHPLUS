#!/bin/bash

# ==============================================================================
#  INSTALADOR SSHPLUS MANAGER - vFiel
#  - L√≥gica 100% fiel ao script original, incluindo caminhos e sequ√™ncia.
#  - Interface modernizada para ser compacta e elegante.
# ==============================================================================

# --- DEFINI√á√ïES DE ESTILO E CORES ---
C_RESET='\033[0m'
C_BOLD='\033[1m'
C_RED='\033[1;31m'
C_GREEN='\033[1;32m'
C_YELLOW='\033[1;33m'
C_BLUE='\033[1;34m'
C_CYAN='\033[1;36m'
C_WHITE='\033[1;37m'

# --- √çcones ---
ICON_OK="${C_GREEN}‚úì${C_RESET}"
ICON_FAIL="${C_RED}‚úó${C_RESET}"
ICON_WARN="${C_YELLOW}‚ö†Ô∏è${C_RESET}"
ICON_INFO="${C_BLUE}‚ÑπÔ∏è${C_RESET}"
ICON_ARROW="${C_CYAN}‚û§${C_RESET}"

# --- L√ìGICA ORIGINAL INTOCADA ---
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3√óu3#s87r/l32o4√óc1a√ól1/83√ól24√ói0b√ó' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3√óu3#s√ó87r/83√ól2√ó4√ói0b√ó' | sed -e 's/[^a-z/]//ig')

# ==============================================================================
#  FUN√á√ïES DE INTERFACE E L√ìGICA (TRADU√á√ÉO DIRETA DO ORIGINAL)
# ==============================================================================

print_banner() {
    local title=" $1 "
    local width=60
    local line=""
    for ((i=0; i<width; i++)); do line+="‚ïê"; done
    local padding_total=$((width - ${#title}))
    local padding_left=$((padding_total / 2))
    echo -e "${C_CYAN}${line}${C_RESET}"
    printf "%*s" $padding_left ""
    echo -e "${C_WHITE}${C_BOLD}${title}${C_RESET}"
    echo -e "${C_CYAN}${line}${C_RESET}\n"
}

print_info() {
    local icon="$1"
    local text="$2"
    echo -e " ${icon} ${C_WHITE}${text}${C_RESET}"
}

# Substitui√ß√£o direta da fun_bar, com visual spinner
run_with_spinner() {
    local msg="$1"
    local cmd_func="$2"
    
    # A fun√ß√£o fun_bar original executava comandos em background
    # e usava um arquivo 'fim' para sinalizar. Vamos replicar isso.
    (
      [[ -e $HOME/fim ]] && rm -f $HOME/fim
      # Executa o comando/fun√ß√£o passado. Oculta toda a sa√≠da.
      $cmd_func &>/dev/null
      touch $HOME/fim
    ) &
    
    tput civis
    local spin='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    local i=0
    printf " ${C_YELLOW} %s...${C_RESET}" "$msg"
    
    # Loop enquanto o arquivo 'fim' n√£o existir
    while [[ ! -e $HOME/fim ]]; do
        i=$(( (i+1) % ${#spin} ))
        printf "\r ${C_YELLOW}${spin:$i:1}${C_RESET} %s..." "$msg"
        sleep 0.1
    done
    
    printf "\r ${ICON_OK} %s... ${C_GREEN}Conclu√≠do!${C_RESET} \n" "$msg"
    rm -f $HOME/fim
    tput cnorm
}

# --- FUN√á√ïES ORIGINAIS ---
verif_key() {
    chmod +x $_Ink/list &>/dev/null
    [[ ! -e "$_Ink/list" ]] && { echo -e "\n${C_RED}KEY INV√ÅLIDA!${C_RESET}"; rm -rf $HOME/Plus &>/dev/null; sleep 2; clear; exit 1; }
}

verif_key2() {
    chmod +x $_Ink/listARM &>/dev/null
    [[ ! -e "$_Ink/listARM" ]] && { echo -e "\n${C_RED}KEY INV√ÅLIDA!${C_RESET}"; rm -rf $HOME/Plus &>/dev/null; sleep 2; clear; exit 1; }
}

otimize_python() {
    apt-get install python -y &>/dev/null
    apt-get install python2 -y &>/dev/null
    apt-get install python3.6 -y &>/dev/null
    apt-get install python3.7 -y &>/dev/null
    apt-get install python3.8 -y &>/dev/null
    apt-get install python3.9 -y &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 &>/dev/null
    apt install pip -y &>/dev/null
    apt install python3-pip -y &>/dev/null
    apt install socat -y &>/dev/null
    update-alternatives --set python3 /usr/bin/python3.6 &>/dev/null
}

fun_attlist() {
    apt-get update -y
    [[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
    echo "crz: $(date)" >/usr/share/.plus/.plus
}

inst_pct() {
    _pacotes=("bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python-pip" "python" "at")
    for _prog in ${_pacotes[@]}; do apt install $_prog -y; done
    pip install speedtest-cli
}


# ==============================================================================
#  IN√çCIO DA EXECU√á√ÉO DO SCRIPT
# ==============================================================================
clear
[[ "$(whoami)" != "root" ]] && {
    echo -e "${C_YELLOW}[${C_RED}Erro${C_YELLOW}] ${C_WHITE}- ${C_YELLOW}voc√™ precisa executar como root${C_RESET}"
    rm $HOME/Plus &>/dev/null 2>&1
    exit 0
}

cd $HOME # Garante que estamos no diret√≥rio HOME, como no original

# --- TELA DE BOAS-VINDAS (MODERNIZADA) ---
print_banner "üöÄ     BEM-VINDO AO SSHPLUS     üöÄ"
print_info "${ICON_WARN}" "${C_YELLOW}Este script ir√° instalar um conjunto de ferramentas para gerenciar seu servidor.${C_RESET}"
print_info "${ICON_INFO}" "${C_WHITE}Para uma melhor experi√™ncia, use um terminal com tema escuro.${C_RESET}"
echo
echo -e "${C_BLUE}             ‚â†√ó‚â†√ó‚â†√ó[ ${C_GREEN}EDIT:@alfalemos${C_BLUE} ]‚â†√ó‚â†√ó‚â†√ó${C_RESET}"
echo

# --- MENU DE SELE√á√ÉO (MODERNIZADO) ---
read -p " ${ICON_ARROW} Deseja gerar a KEY e iniciar a instala√ß√£o? [S/n]: " -e -i "S" x
[[ $x =~ ^[nN]$ ]] && exit 0

ARCH=$(uname -m)
resposta=""
case "$ARCH" in
    x86_64) resposta="1";;
    aarch64) resposta="2";;
    *)
        print_info "${ICON_FAIL}" "Sua arquitetura (${C_RED}${ARCH}${C_WHITE}) n√£o √© suportada."
        exit 1
        ;;
esac

# ==============================================================================
#  FLUXO DE INSTALA√á√ÉO - L√ìGICA 100% FIEL AO ORIGINAL
# ==============================================================================

if [[ "$resposta" = '1' ]]; then
    # --- L√≥gica para x86_64 ---
    sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config >/dev/null 2>&1
    service ssh restart >/dev/null 2>&1
    mkdir /etc/rec >/dev/null 2>&1
    
    print_info "${ICON_INFO}" "Verificando KEY..."
    rm $_Ink/list >/dev/null 2>&1
    wget -P $_Ink https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/list >/dev/null 2>&1
    verif_key
    print_info "${ICON_OK}" "${C_GREEN}KEY V√°lida! Prosseguindo...${C_RESET}"
    sleep 3s

    echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1
    rm versao* >/dev/null 2>&1
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/versao >/dev/null 2>&1
    
    cd /bin/ >/dev/null 2>&1 # Mudan√ßa de diret√≥rio como no original
    rm v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/botteste.sh >/dev/null 2>&1
    chmod 777 v2raymanager botteste.sh >/dev/null 2>&1
    
    mkdir $HOME/BOT >/dev/null 2>&1
    cd $HOME/BOT >/dev/null 2>&1 # Mudan√ßa de diret√≥rio como no original
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/ShellBot.sh >/dev/null 2>&1
    chmod 777 ShellBot.sh >/dev/null 2>&1
    
    cd >/dev/null 2>&1 # Volta para o HOME como no original

    if [[ -f "$HOME/usuarios.db" ]]; then
        clear
        print_banner "BASE DE DADOS"
        print_info "${ICON_WARN}" "Uma base de dados (${C_YELLOW}usuarios.db${C_WHITE}) foi encontrada."
        print_info "${C_CYAN}[1]" "Manter a base de dados atual"
        print_info "${C_CYAN}[2]" "Criar uma nova (resetar limites)"
        read -p " ${ICON_ARROW} Escolha uma op√ß√£o [1]: " -e -i 1 optiondb
    fi
    [[ "$optiondb" = '2' || ! -f "$HOME/usuarios.db" ]] && {
        awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' >$HOME/usuarios.db
    }

    clear
    print_banner "AGUARDE A INSTALA√á√ÉO"
    run_with_spinner "Atualizando sistema" "fun_attlist"
    run_with_spinner "Instalando pacotes" "inst_pct"
    
    [[ -f "/usr/sbin/ufw" ]] && ufw allow 443/tcp >/dev/null && ufw allow 80/tcp >/dev/null && ufw allow 3128/tcp >/dev/null && ufw allow 8799/tcp >/dev/null && ufw allow 8080/tcp >/dev/null

    clear
    print_banner "FINALIZANDO"
    run_with_spinner "Otimizando Python" "otimize_python"
    run_with_spinner "Concluindo defini√ß√µes" "$_Ink/list $_lnk $_Ink $_1nk"

    clear
    print_banner "‚ú® INSTALA√á√ÉO CONCLU√çDA ‚ú®"
    cd $HOME # Garante que estamos no HOME para a mensagem final
    print_info "${ICON_OK}" "O SSHPLUS Manager foi instalado."
    print_info "${ICON_ARROW}" "Comando principal: ${C_GREEN}menu${C_RESET}"
    print_info "${ICON_INFO}" "Telegram: ${C_CYAN}@SSHPLUS${C_RESET}"
    rm $HOME/Plus && cat /dev/null >~/.bash_history && history -c

elif [[ "$resposta" = '2' ]]; then
    # --- L√≥gica para aarch64 (ARM) ---
    sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config >/dev/null 2>&1
    service ssh restart >/dev/null 2>&1
    
    print_info "${ICON_INFO}" "Verificando KEY..."
    rm $_Ink/listARM >/dev/null 2>&1
    wget -P $_Ink https://www.dropbox.com/s/cs5poyigwm97dyd/listARM >/dev/null 2>&1
    verif_key2
    print_info "${ICON_OK}" "${C_GREEN}KEY V√°lida! Prosseguindo...${C_RESET}"
    sleep 3s

    echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1
    rm versao* >/dev/null 2>&1
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/versao >/dev/null 2>&1
    
    cd /bin/ >/dev/null 2>&1
    rm v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/botteste.sh >/dev/null 2>&1
    chmod 777 v2raymanager botteste.sh >/dev/null 2>&1
    
    mkdir $HOME/BOT >/dev/null 2>&1
    cd $HOME/BOT >/dev/null 2>&1
    wget https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/ShellBot.sh >/dev/null 2>&1
    chmod 777 ShellBot.sh >/dev/null 2>&1
    
    cd >/dev/null 2>&1

    if [[ -f "$HOME/usuarios.db" ]]; then
        clear
        print_banner "BASE DE DADOS"
        print_info "${ICON_WARN}" "Uma base de dados (${C_YELLOW}usuarios.db${C_WHITE}) foi encontrada."
        print_info "${C_CYAN}[1]" "Manter a base de dados atual"
        print_info "${C_CYAN}[2]" "Criar uma nova (resetar limites)"
        read -p " ${ICON_ARROW} Escolha uma op√ß√£o [1]: " -e -i 1 optiondb
    fi
    [[ "$optiondb" = '2' || ! -f "$HOME/usuarios.db" ]] && {
        awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' >$HOME/usuarios.db
    }
    
    clear
    print_banner "AGUARDE A INSTALA√á√ÉO"
    run_with_spinner "Atualizando sistema" "fun_attlist"
    run_with_spinner "Instalando pacotes" "inst_pct"
    
    [[ -f "/usr/sbin/ufw" ]] && ufw allow 443/tcp >/dev/null && ufw allow 80/tcp >/dev/null && ufw allow 3128/tcp >/dev/null && ufw allow 8799/tcp >/dev/null && ufw allow 8080/tcp >/dev/null

    clear
    print_banner "FINALIZANDO"
    run_with_spinner "Otimizando Python" "otimize_python"
    run_with_spinner "Concluindo defini√ß√µes" "$_Ink/listARM $_lnk $_Ink $_1nk"

    clear
    print_banner "‚ú® INSTALA√á√ÉO CONCLU√çDA ‚ú®"
    cd $HOME
    print_info "${ICON_OK}" "O SSHPLUS foi instalado."
    print_info "${ICON_ARROW}" "Comando principal: ${C_GREEN}menu${C_RESET}"
    print_info "${ICON_INFO}" "Telegram: ${C_CYAN}@alfalemos${C_RESET}"
    rm $HOME/Plus && cat /dev/null >~/.bash_history && history -c

fi